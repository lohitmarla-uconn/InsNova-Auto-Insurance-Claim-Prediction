InsNova.data <- read.csv("2023-travelers-university-competition/InsNova_data_2023_train.csv")
library(ggplot2)
#Reading the csv file
insurance.data.dup <- read.csv("~/Documents/GitHub/GitHub/Insurance-Claim-Prediction/data/insurance.csv")
insurance.data <- insurance.data.dup
str(insurance.data)
nrow(insurance.data)
InsNova.data <- read.csv("data/InsNova_data_2023_train.csv")
train.data <- InsNova.data
InsNova.val_data <- read.csv("data/InsNova_data_2023_vh.csv")
test.data <- InsNova.val_data
nrow(train.data)
nrow(InsNova.data)
nrow(test.data)
nrow(InsNova.val_data)
InsNova.data <- read.csv("data/InsNova_data_2023_train.csv")
train.data <- InsNova.data
InsNova.val_data <- read.csv("data/InsNova_data_2023_vh.csv")
test.data <- InsNova.val_data
nrow(train.data)
nrow(InsNova.data)
nrow(test.data)
nrow(InsNova.val_data)
column_names <- c(
"gender", "agecat", "engine_type",
"veh_color", "marital_status", "e_bill", "time_of_week_driven", "high_education_ind", "veh_body"
)
# Convert the selected columns to factors in your data frame
train.data[, column_names] <- lapply(train.data[, column_names], as.factor)
test.data[, column_names] <- lapply(test.data[, column_names], as.factor)
# Check the data frame structure
train.data$clm <- NULL
train.data$id <- NULL
test.data$id <- NULL
train.data$numclaims <- NULL
str(train.data)
str(test.data)
library(e1071)
hist( (train.data$claimcst0), breaks=30, main="", xlab="claimcst0", col= "darkgrey")
summary(train.data$claimcst0)
hist( log(train.data$claimcst0), breaks=30, main="", xlab="log(claimcst0)", col= "darkslateblue")
hist( sqrt(train.data$claimcst0), breaks=30, main="", xlab="sqrt(claimcst0)", col= "slategrey")
hist( poly(train.data$claimcst0, 2), breaks=30, main="", xlab="poly(claimcst0)", col= "darkgreen")
mlr.full.mod <- lm(claimcst0 ~ . , data = train.data)
summary(mlr.full.mod)
car::qqPlot(residuals(mlr.full.mod), main = NA, pch = 19, col = 2, cex = 0.7)
SumModelGini <- function(actuals, predictions) {
df = data.frame(actuals = actuals, predictions = predictions)
df <- df[order(df$predictions, decreasing = TRUE),]
df$random = (1:nrow(df))/nrow(df)
totalPos <- sum(df$actuals)
df$cumPosFound <- cumsum(df$actuals) # this will store the cumulative number of positive examples found (used for computing "Model Lorentz")
df$Lorentz <- df$cumPosFound / totalPos # this will store the cumulative proportion of positive examples found ("Model Lorentz")
df$Gini <- df$Lorentz - df$random # will store Lorentz minus random
return(sum(df$Gini))
}
NormalizedGini <- function(actuals, predictions) {
SumModelGini(actuals, predictions) / SumModelGini(actuals, actuals)
}
InsNova.data$id <- NULL
InsNova.data$clm <- NULL
InsNova.data$numclaims <- NULL
InsNova.data[, column_names] <- lapply(InsNova.data[, column_names], as.factor)
mlr.train.claimcst0 <- predict(mlr.full.mod, newdata = InsNova.data, type = "response")
NormalizedGini(mlr.train.claimcst0, train.data$claimcst0 )
plot(train.data$claimcst0, predict(mlr.full.mod,newdata = train.data),
col=4, cex=0.3, xlab="Actual", ylab="Predicted", axes=FALSE)
extpts <- which(abs(residuals(mlr.full.mod)) > 3*sd(residuals(mlr.full.mod)))
text(train.data$claimcst0[extpts],
predict(mlr.full.mod,newdata = train.data)[extpts],
rownames(train.data)[extpts], cex=0.5, col=2)
axis(1); axis(2); grid(); abline(0,1, col=4, lwd=3)
car::vif(mod.1)
car::vif(mlr.full.mod)
car::vif(mlr.full.mod)
cond_num <- round(max(car::vif(mlr.full.mod))  / min(car::vif(mlr.full.mod))  , 0)
car::vif(mlr.full.mod)
cond_num <- round(max(car::vif(mlr.full.mod))  / min(car::vif(mlr.full.mod))  , 0)
car::vif(mlr.full.mod)
cond_num <- round(max(car::vif(mlr.full.mod))  / min(car::vif(mlr.full.mod))  , 0)
car::vif(mlr.full.mod)
cond_num <- round(max(car::vif(mlr.full.mod))  / min(car::vif(mlr.full.mod))  , 0)
cond_num
hist( log(train.data$claimcst0), breaks=30, main="", xlab="log(claimcst0)", col= "black")
hist( log(train.data$claimcst0), breaks=30, main="", xlab="log(claimcst0)", col= "darkgrey")
hist( sqrt(train.data$claimcst0), breaks=30, main="", xlab="sqrt(claimcst0)", col= "darkgrey")
hist( poly(train.data$claimcst0, 2), breaks=30, main="", xlab="poly(claimcst0)", col= "darkgrey")
